
@{
    ViewBag.Title = "Report3";
}
<h2>Report3</h2>
<div class="row">
    <div class="col-md-12">
        <h3>Working Hours Report</h3>
        <p>This report shows the working hours for each employee based on their log entries.</p>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <p>Click the button below to generate the report.</p>
        <form id="myForm" method="post">
            <input type="" name="fileNumber" value="2234">
            <input type="" name="startDate" value='@DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd")'>
            <input type="" name="endDate" value='@DateTime.Now.ToString("yyyy-MM-dd")'>
            <button type="submit" class="btn btn-primary" onclick="">Generate Report</button>
        </form>

        
    </div>
<div class="row">
    <div class="col-md-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>File Number</th>
                    <th>Total Working Hours</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody id="reportTableBody">
                <!-- Data will be populated here -->
            </tbody>
        </table>
    </div>
<script>
    let workingHours = {};
    //let json= readSQL("select * from ACLogs where FileNumber='2234' order by DateTime");
    

function calculateWorkingHour1(entries) {
    const results = [];
    let currentDate = null;
    let dailyHours = 0;
    let lastIn = null;

    // Process each entry
    for (const entry of entries) {
        const dateTime = new Date(entry.DateTime);
        const dateStr = dateTime.toISOString().split('T')[0]; // Extract YYYY-MM-DD

        // Initialize a new day if needed
        if (currentDate !== dateStr) {
            if (currentDate !== null && dailyHours > 0) {
                results.push({
                    date: currentDate,
                    totalHours: (dailyHours / (1000 * 60 * 60)).toFixed(2) + " hours",
                    sessions: []
                });
            }
            currentDate = dateStr;
            dailyHours = 0;
        }

        if (entry.Type === "In") {
            lastIn = dateTime;
        } else if (entry.Type === "Out" && lastIn !== null) {
            const duration = dateTime - lastIn;
            dailyHours += duration;

            // Store session details
            const lastResult = results.find(r => r.date === dateStr) || { date: dateStr, totalHours: 0, sessions: [] };
            lastResult.sessions.push({
                in: lastIn.toLocaleTimeString(),
                out: dateTime.toLocaleTimeString(),
                duration: (duration / (1000 * 60 * 60)).toFixed(2) + " hours"
            });
            lastIn = null;
        }
    }

    // Add the last day if it has hours
    if (currentDate !== null && dailyHours > 0) {
        results.push({
            date: currentDate,
            totalHours: (dailyHours / (1000 * 60 * 60)).toFixed(2) + " hours",
            sessions: []
        });
    }

    return results;
}

function calculateWorkingHours(entries) {
    const results = {};
    let lastIn = null;

    for (const entry of entries) {
        const dateTime = new Date(entry.DateTime);

        if (entry.Type === "In") {
            lastIn = dateTime;
        } else if (entry.Type === "Out" && lastIn !== null) {
            const durationMs = dateTime - lastIn;
            const durationHours = (durationMs / (1000 * 60 * 60)).toFixed(2);

            // Determine if it's an overnight session
            const inDateStr = lastIn.toISOString().split('T')[0];
            const outDateStr = dateTime.toISOString().split('T')[0];
            const isOvernight = inDateStr !== outDateStr;

            // Group by the "In" date (but track if it spans days)
            if (!results[inDateStr]) {
                results[inDateStr] = {
                    date: inDateStr,
                    totalHours: 0,
                    sessions: []
                };
            }

            results[inDateStr].sessions.push({
                in: lastIn.toLocaleTimeString(),
                out: dateTime.toLocaleTimeString(),
                duration: `${durationHours} hours`,
                isOvernight: isOvernight  // Explicitly mark if it spans days
            });

            results[inDateStr].totalHours += parseFloat(durationHours);
            lastIn = null;  // Reset after pairing
        }
    }

    // Convert results object to an array
    return Object.values(results);
}
 document.getElementById("myForm").addEventListener("submit", function(event) {
            event.preventDefault(); 
    
    const form = document.getElementById('myForm');
    const formData = new FormData(form);
    const fileNumber = formData.get('fileNumber');
    const startDate = formData.get('startDate');
    const endDate = formData.get('endDate');
    const json = readSQL(`select * from ACLogs where FileNumber='${fileNumber}' and DateTime >= '${startDate}' and DateTime <= '${endDate}' order by DateTime`);
    let jsonArrange={}
for(let i=0; i < json.length; i++) {
    //jsonData[i] = JSON.parse(jsonData[i]);
    if (!jsonArrange[json[i].FileNumber]) 
    {
        jsonArrange[json[i].FileNumber] = [];
    }
    else 
    {
        let d={...json[i]}
        delete d["FileNumber"];
        jsonArrange[json[i].FileNumber].push(d);  
    }
   
}

console.log("jsonArrange",jsonArrange);

for (let file in jsonArrange) {
    let logs = jsonArrange[file];
    console.log(file,"=>",logs,"=>",calculateWorkingHours(logs))
    
    workingHours[file] = calculateWorkingHours(logs);
}
console.log("workingHours =>",workingHours);

    // Clear previous report data
    const reportTableBody = document.getElementById('reportTableBody');
    reportTableBody.innerHTML = '';

    // Populate the report table
    for (const file in workingHours) {
        const totalHours = workingHours[file].reduce((sum, entry) => sum + parseFloat(entry.totalHours), 0).toFixed(2);
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${file}</td>
            <td>${totalHours} hours</td>
            <td>
                <button class="btn btn-info" onclick="showDetails('${file}')">Details</button>
            </td>
        `;
        reportTableBody.appendChild(row);
    }
})
/*function showDetails(fileNumber) {
    const details = workingHours[fileNumber];
    let detailHtml = `<h4>Details for File Number: ${fileNumber}</h4>`;
    detailHtml += `<table class="table table-bordered"><thead><tr><th>Date</th><th>Total Hours</th><th>Sessions</th></tr></thead><tbody>`;
    
    details.forEach(entry => {
        detailHtml += `<tr>
            <td>${entry.date}</td>
            <td>${entry.totalHours}</td>
            <td>`;
        entry.sessions.forEach(session => {
            detailHtml += `In: ${session.in}, Out: ${session.out}, Duration: ${session.duration}`;
            if (session.isOvernight) {
                detailHtml += " (Overnight)";
            }
            detailHtml += "<br>";
        });
        detailHtml += `</td></tr>`;
    });

    detailHtml += `</tbody></table>`;
    
    // Display the details in a modal or alert
    alert(detailHtml); // Replace with a modal for better UX
}*/
    // Function to show details in a modal
    function showDetails(fileNumber) {
        const details = workingHours[fileNumber];
        let detailHtml = `<h4>Details for File Number: ${fileNumber}</h4>`;
        detailHtml += `<table class="table table-bordered"><thead><tr><th>Date</th><th>Total Hours</th><th>Sessions</th></tr></thead><tbody>`;

        details.forEach(entry => {
            detailHtml += `<tr>
            <td>${entry.date}</td>
            <td>${entry.totalHours}</td>
            <td>`;
            entry.sessions.forEach(session => {
                detailHtml += `In: ${session.in}, Out: ${session.out}, Duration: ${session.duration}`;
                if (session.isOvernight) {
                    detailHtml += " (Overnight)";
                }
                detailHtml += "<hr>";
            });
            detailHtml += `</td></tr>`;
        });

        detailHtml += `</tbody></table>`;

        // Populate modal content and show modal
        $('#detailsModalBody').html(detailHtml);
        $('#detailsModal').modal('show');
    }
</script>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Working Hours Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="detailsModalBody">
                <!-- Details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


